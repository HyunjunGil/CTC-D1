# =====================================================
# 간단한 쇼핑몰 프로젝트 - Docker Compose 설정 파일
# =====================================================
# 이 파일은 개발 환경에서 필요한 모든 서비스를 한 번에 실행할 수 있게 해줍니다.
# Docker Compose는 여러 컨테이너를 정의하고 관리하는 도구입니다.

# Docker Compose 버전을 명시합니다 (최신 안정 버전 사용)
version: '3.8'

# =====================================================
# 서비스 정의 섹션
# =====================================================
# services 아래에 실행할 컨테이너들을 정의합니다.
# 각 서비스는 독립적인 컨테이너로 실행됩니다.
services:
  
  # =====================================================
  # 1. PostgreSQL 데이터베이스 서비스
  # =====================================================
  # 이 서비스는 애플리케이션의 데이터를 저장하는 데이터베이스입니다.
  database:
    # 사용할 Docker 이미지를 지정합니다.
    # postgres:15는 PostgreSQL 15 버전의 공식 이미지입니다.
    image: postgres:15
    
    # 컨테이너의 이름을 지정합니다 (선택사항이지만 디버깅에 유용).
    container_name: simple-shop-db
    
    # 컨테이너가 재시작될 때의 정책을 설정합니다.
    # always: 컨테이너가 중지되면 자동으로 재시작합니다.
    restart: always
    
    # 환경 변수를 설정합니다.
    # 이 값들은 데이터베이스 연결에 필요한 설정들입니다.
    environment:
      # 데이터베이스 이름을 설정합니다.
      POSTGRES_DB: simple_shop
      # 데이터베이스 사용자 이름을 설정합니다.
      POSTGRES_USER: shop_user
      # 데이터베이스 비밀번호를 설정합니다.
      POSTGRES_PASSWORD: shop_password
      # 데이터베이스 초기화 스크립트가 있다면 실행합니다.
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    
    # 컨테이너 내부의 포트를 호스트 시스템의 포트와 연결합니다.
    # 형식: "호스트포트:컨테이너포트"
    # 5432는 PostgreSQL의 기본 포트입니다.
    ports:
      - "5432:5432"
    
    # 데이터베이스 파일을 호스트 시스템에 저장할 볼륨을 마운트합니다.
    # 이렇게 하면 컨테이너를 삭제해도 데이터가 유지됩니다.
    volumes:
      # postgres_data는 Docker가 관리하는 명명된 볼륨입니다.
      # 데이터베이스 파일들이 이 볼륨에 저장됩니다.
      - postgres_data:/var/lib/postgresql/data
      # 초기화 SQL 스크립트가 있다면 실행할 수 있습니다.
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    
    # 네트워크 설정 (기본 네트워크 사용)
    networks:
      - simple-shop-network
    
    # 컨테이너가 완전히 시작될 때까지 기다리는 조건을 설정합니다.
    # 이는 다른 서비스들이 데이터베이스가 준비된 후에 시작되도록 보장합니다.
    healthcheck:
      # PostgreSQL이 준비되었는지 확인하는 명령어
      test: ["CMD-SHELL", "pg_isready -U shop_user -d simple_shop"]
      # 첫 번째 체크까지 기다리는 시간 (초)
      interval: 10s
      # 타임아웃 시간 (초)
      timeout: 5s
      # 연속으로 실패해도 괜찮은 횟수
      retries: 5
      # 첫 번째 체크 전까지 기다리는 시간 (초)
      start_period: 30s

  # =====================================================
  # 2. Spring Boot 백엔드 서비스
  # =====================================================
  # 이 서비스는 쇼핑몰의 API를 제공하는 백엔드 애플리케이션입니다.
  backend:
    # 현재 디렉토리의 backend 폴더를 빌드 컨텍스트로 사용합니다.
    # 이는 Dockerfile이 backend 폴더에 있다는 의미입니다.
    build:
      context: ./backend
      # 사용할 Dockerfile을 명시합니다.
      dockerfile: Dockerfile
      # 빌드 시 사용할 인수들을 설정합니다.
      args:
        # Java 버전을 17로 설정합니다.
        JAVA_VERSION: "17"
        # Gradle 버전을 설정합니다.
        GRADLE_VERSION: "8.4"
    
    # 컨테이너의 이름을 지정합니다.
    container_name: simple-shop-backend
    
    # 컨테이너가 재시작될 때의 정책을 설정합니다.
    restart: always
    
    # 환경 변수를 설정합니다.
    # 이 값들은 애플리케이션 설정에 사용됩니다.
    environment:
      # Spring Boot가 사용할 프로필을 설정합니다.
      SPRING_PROFILES_ACTIVE: "docker"
      # 데이터베이스 연결 URL을 설정합니다.
      # database는 위에서 정의한 PostgreSQL 서비스의 이름입니다.
      # Docker Compose는 서비스 이름을 호스트명으로 사용할 수 있게 해줍니다.
      SPRING_DATASOURCE_URL: "jdbc:postgresql://database:5432/simple_shop"
      # 데이터베이스 사용자 이름
      SPRING_DATASOURCE_USERNAME: "shop_user"
      # 데이터베이스 비밀번호
      SPRING_DATASOURCE_PASSWORD: "shop_password"
      # JPA 설정 (테이블을 자동으로 생성하고 SQL을 콘솔에 출력)
      SPRING_JPA_HIBERNATE_DDL_AUTO: "create-drop"
      SPRING_JPA_SHOW_SQL: "true"
      # 서버 포트 설정
      SERVER_PORT: "8080"
      # 애플리케이션 이름
      SPRING_APPLICATION_NAME: "Simple Shop Backend"
    
    # 컨테이너 내부의 포트를 호스트 시스템의 포트와 연결합니다.
    # 8080은 Spring Boot의 기본 포트입니다.
    ports:
      - "8080:8080"
    
    # 애플리케이션 로그를 호스트 시스템에 저장할 볼륨을 마운트합니다.
    volumes:
      # 로그 파일들을 호스트의 logs 폴더에 저장합니다.
      - ./logs:/app/logs
      # 애플리케이션 설정 파일을 마운트할 수 있습니다.
      - ./backend/src/main/resources:/app/resources:ro
    
    # 네트워크 설정
    networks:
      - simple-shop-network
    
    # 이 서비스가 시작되기 전에 database 서비스가 완전히 준비되어야 함을 명시합니다.
    # depends_on은 서비스 시작 순서를 제어합니다.
    depends_on:
      database:
        # healthcheck가 성공할 때까지 기다립니다.
        condition: service_healthy
    
    # 컨테이너가 완전히 시작될 때까지 기다리는 조건을 설정합니다.
    healthcheck:
      # HTTP 요청으로 애플리케이션이 준비되었는지 확인합니다.
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =====================================================
  # 3. React 프론트엔드 서비스
  # =====================================================
  # 이 서비스는 사용자가 웹 브라우저에서 접근하는 프론트엔드 애플리케이션입니다.
  frontend:
    # 현재 디렉토리의 frontend 폴더를 빌드 컨텍스트로 사용합니다.
    build:
      context: ./frontend
      # 사용할 Dockerfile을 명시합니다.
      dockerfile: Dockerfile
      # 프로덕션 스테이지 사용
      target: production
      # 빌드 시 사용할 인수들을 설정합니다.
      args:
        # Node.js 버전을 18로 설정합니다.
        NODE_VERSION: "18"
        # npm 캐시를 사용하여 빌드 속도를 향상시킵니다.
        NPM_CACHE: "true"
    
    # 컨테이너의 이름을 지정합니다.
    container_name: simple-shop-frontend
    
    # 컨테이너가 재시작될 때의 정책을 설정합니다.
    restart: always
    
    # 환경 변수를 설정합니다.
    # 이 값들은 React 애플리케이션 설정에 사용됩니다.
    environment:
      # React 애플리케이션이 개발 모드로 실행되도록 설정합니다.
      # 애플리케이션 제목을 설정합니다.
      REACT_APP_TITLE: "Simple Shop"
      # Vite 개발 서버 포트를 설정합니다.
      VITE_PORT: "5173"
      # Vite가 모든 인터페이스에서 접근 가능하도록 설정합니다.
      VITE_HOST: "0.0.0.0"
    
    # 컨테이너 내부의 포트를 호스트 시스템의 포트와 연결합니다.
    # 3000번 포트로 매핑 (권한 문제 방지)
    ports:
      - "3000:80"
    
    # 소스 코드 변경을 실시간으로 반영하기 위한 볼륨 마운트를 설정합니다.
    volumes:
      # 소스 코드를 컨테이너에 마운트하여 개발 시 코드 변경사항이 즉시 반영됩니다.
      - ./frontend/src:/app/src
      # package.json을 마운트하여 의존성 변경사항을 반영합니다.
      - ./frontend/package.json:/app/package.json
      # node_modules는 호스트의 것을 사용하지 않고 컨테이너 내부의 것을 사용합니다.
      - /app/node_modules
    
    # 네트워크 설정
    networks:
      - simple-shop-network
    
    # 이 서비스가 시작되기 전에 backend 서비스가 완전히 준비되어야 함을 명시합니다.
    depends_on:
      backend:
        condition: service_healthy
    
    # 컨테이너가 완전히 시작될 때까지 기다리는 조건을 설정합니다.
    healthcheck:
      # HTTP 요청으로 애플리케이션이 준비되었는지 확인합니다.
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

# =====================================================
# 볼륨 정의 섹션
# =====================================================
# volumes는 데이터를 영구적으로 저장하기 위한 설정입니다.
# 이렇게 정의된 볼륨은 Docker가 관리하며, 컨테이너를 삭제해도 데이터가 유지됩니다.
volumes:
  # PostgreSQL 데이터베이스 파일을 저장할 볼륨을 정의합니다.
  # 이 볼륨은 database 서비스에서 사용됩니다.
  postgres_data:
    # 볼륨의 이름을 명시적으로 지정합니다.
    name: simple-shop-postgres-data
    # 볼륨의 드라이버를 지정합니다 (기본값: local).
    driver: local
    # 볼륨에 대한 추가 옵션을 설정할 수 있습니다.
    driver_opts:
      # 볼륨의 타입을 지정합니다.
      type: none
      # 볼륨이 저장될 호스트의 경로를 지정합니다.
      o: bind
      # 실제 디렉토리 경로를 지정합니다.
      device: ./data/postgres

# =====================================================
# 네트워크 정의 섹션
# =====================================================
# networks는 서비스 간의 통신을 위한 네트워크를 정의합니다.
# 이렇게 정의된 네트워크는 서비스들이 서로를 찾을 수 있게 해줍니다.
networks:
  # 모든 서비스가 사용할 공통 네트워크를 정의합니다.
  simple-shop-network:
    # 네트워크의 이름을 명시적으로 지정합니다.
    name: simple-shop-network
    # 네트워크의 드라이버를 지정합니다 (기본값: bridge).
    driver: bridge
    # 네트워크에 대한 추가 옵션을 설정할 수 있습니다.
    driver_opts:
      # 네트워크의 MTU 값을 설정합니다.
      com.docker.network.driver.mtu: 1500
    # 네트워크의 IP 주소 범위를 설정할 수 있습니다.
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

# =====================================================
# 사용법 및 주의사항
# =====================================================
# 
# 1. 프로젝트 시작:
#    docker-compose up -d
#    (-d 옵션은 백그라운드에서 실행)
#
# 2. 로그 확인:
#    docker-compose logs -f [service-name]
#    (예: docker-compose logs -f backend)
#
# 3. 서비스 중지:
#    docker-compose down
#
# 4. 서비스 재시작:
#    docker-compose restart [service-name]
#
# 5. 이미지 재빌드:
#    docker-compose up --build
#
# 6. 볼륨 삭제 (데이터 초기화):
#    docker-compose down -v
#
# 주의사항:
# - 처음 실행 시 이미지 다운로드와 빌드에 시간이 걸릴 수 있습니다.
# - 포트 충돌이 발생하면 호스트의 포트를 변경하세요.
# - 데이터베이스 데이터는 postgres_data 볼륨에 저장됩니다.
# - 로그 파일은 ./logs 폴더에 저장됩니다.
